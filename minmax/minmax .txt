import copy

boardState = [['-','-','-'],
              ['-','-','-'],
              ['-','-','-']]

# function that will print current board state
def printBoard(boardState):
    print("    0   1   2")
    for i in range(3):
        print("  -------------")
        print("{0} |".format(i),end='')
        for j in range(3):
            print(" {0} |".format(boardState[i][j]),end='')
        print()
    print("  -------------")

# replaces a coordinate in the board with a piece
def move(player, row, col):
    global boardState
    boardState[row][col] = player

# check if board has finished state
# finished state is when 3 of the same symbol appeared in a line
def stateCheck(player, boardState):
    # 11 finished states
    for x in range(3):
        if x == 0 :
            #0th row horizontal
            if boardState[x][0] == player and boardState[x][1] == player and boardState[x][2]== player :
                return True
            #0th column vertical
            if boardState[x][0] == player and boardState[x+1][0]== player  and boardState[x+2][0]== player :
                return True
        if x == 1 :
            #1st row horizontal
            if boardState[x][0] == player and boardState[x][1] == player and boardState[x][2]== player :
                return True
            #1st column vertical
            x -=1
            if boardState[x][1] == player and boardState[x+1][1] == player and boardState[x+2][1]== player :
                return True
        if x == 2 :
            #2nd row horizontal
            if boardState[x][0] == player and boardState[x][1]== player  and boardState[x][2]== player :
                return True
            #2nd column vertical
            x -=2
            if boardState[x][2] == player and boardState[x+1][2]== player  and boardState[x+2][2]== player :
                return True
    # check for diagonals
    if boardState[1][1] == player:
        # check for backward diagonal \
        if boardState[0][0] == player and boardState[2][2] == player :
            return True
        # check for forward diagonal /
        if boardState[0][2] == player and boardState[2][0] == player :
            return True
    # check for draws
    # if all tiles are field but there are no winners it is a draw
    filled = True
    for i in range(3):
        for j in range(3):
            if boardState[i][j] == '-':
                filled = False
    if filled == True:
        return "DRAW"
    # if nothing then false
    return False

#generates the moves of the bot
# maximize the bot
# minimuze the player
# TODO: natatalo yung bot, di dapat
# TODO: lagyan ng counter kung ilang state para malaman ang fastest
# TODO: lagyan ng comparison sa loob mismo ng min max function (comparison is yung pipili kung ano yung best sa moveset)
def botMove(bot):
    global boardState
    board = copy.deepcopy(boardState)
    maxMove(bot,board)
    print("BOT MOVE")
    printBoard(boardState)


def maxMove(player, board):
    global boardState
    next = 'O'
    if player == 'O':
        next = 'X'
    # bale panalo yung previous player
    if stateCheck(next, board) == True:
        return -1 
    elif stateCheck(next, board) == "DRAW":
        return 0

    #generate moves
    m = -1000000000
    moveset = []
    for i in range(3):
        for j in range(3):
            if board[i][j] == '-':
                moveset.append([i,j])
    #dictionary of actions that has a score of 1 
    choice = []
    for action in moveset:
        x,y = action
        next_board = copy.deepcopy(board)
        next_board[x][y] = player
        v = minMove(next, next_board)
        if v > m:
            m = v
            choice = [x,y]
    next_board = copy.deepcopy(board)
    next_board[choice[0]][choice[1]] = player
    boardState = copy.deepcopy(next_board)
    return m

    ...

def minMove(player, board):
    global boardState
    next = 'O'
    if player == 'O':
        next = 'X'
    # bale panalo yung previous player
    if stateCheck(next, board) == True:
        return 1
    elif stateCheck(next, board) == "DRAW":
        return 0

    #generate moves
    m = 1000000000
    moveset = []
    for i in range(3):
        for j in range(3):
            if board[i][j] == '-':
                moveset.append([i,j])

    #dictionary of actions that has a score of 1 
    choice = []
    for action in moveset:
        x,y = action
        next_board = copy.deepcopy(board)
        next_board[x][y] = player
        v= maxMove(next, next_board)
        if v < m:
            m = v
            choice = [x,y]
    next_board = copy.deepcopy(board)
    next_board[choice[0]][choice[1]] = player
    boardState = copy.deepcopy(next_board)
    return m
    ...


def main():
    # TODO: ASK user if ai will go first
    player = 'X'
    bot = 'O'
    while(1):
        player = input("Choose side X | O : ").upper()
        if player in ['X','O']:
            if player == 'X':
                bot = 'O'
            else:
                bot = 'X'
            break
    printBoard(boardState)
    done = []
    while(1):
        x,y = [int(i) for i in input("Enter coordinate for {0}: ".format(player)).split()]
        if (x,y) in done:
            print("Coordinate already has value, input another")
            continue
        if not(x<3 and x>=0) or not(y<3 and y>=0):
            print("Invalid coordinates")
            continue
        move(player, x , y)
        printBoard(boardState)
        if stateCheck(player, boardState) == True:
            print("Congrats")
            break
        elif stateCheck(player, boardState) == "DRAW":
            print("DRAW")
            break
        botMove(bot)
        if stateCheck(bot, boardState) == True:
            print("Lose")
            break
        elif stateCheck(bot, boardState) == "DRAW":
            print("DRAW")
            break
        else:
            continue
        done.append((x,y))
        print(done)

if __name__ == '__main__':
    main()
